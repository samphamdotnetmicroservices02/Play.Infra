# docker run -d --rm --name mongo -p 27017:27017 -v mongodbdata:/data/db mongo

#docker-compose -p play_infra up -d

version: "3.8"

services:
  mongo: 
    image: mongo
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodbdata:/data/db

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    hostname: rabbitmq

  seq:
    image: datalust/seq
    container_name: seq
    environment:
      - ACCEPT_EULA=Y
    ports: 
      - 5341:5341
      - 8081:80
    volumes:
      # the right side of ":" is the location of data in container. Everything go ingside of ":/data" in the container is going to
      # go into our seqdara volume
      - seqdata:/data

  # https://www.jaegertracing.io/docs/1.6/getting-started/
  jaeger:
    # it's called all in one because Jaeger is actually composed of multiple components. It's a very interesting system. It has tons of components
    # in there, but this docker-image here includes all of those components in just one image. So it makes it very straightforward to use in your box.
    # When you have to fully working a production deployment there will be other images that can use that involve many other components, but that's 
    # kind of a very complex scenario. For our case, for our learning purposes, the only one image is all we need to use.
    image: jaegertracing/all-in-one
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    # https://stackoverflow.com/questions/71762905/jaeger-not-receiving-any-opentelemetry-trace
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 9411:9411
      - 14250:14250
      - 14268:14268
      - 4317:4317
      - 4318:4318
      - 14269:14269

      # use to browse in Jaeger tracing portal.
      - 16686:16686
      
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      # the first volume that we have to define is the one that is going to point into our brand new otel.yaml file. So we 
      # have to map the file that is in our host into the location where Prometheus can find that file from within the
      # docker container (./prometheus/otel.yaml). And then it has to map into the location where Prometheus knows to look
      # for this file. So that would be under "/etc/prometheus/prometheus.yml"
      - ./prometheus/otel.yaml:/etc/prometheus/prometheus.yml
      # The next volume is the volume where Prometheus itself is going to store its own data. So it's going to keep track
      # of data. So for that, just like we have done for other services, we have to define another volume in our box 
      # (prometheusdata). So we are going to mount into the our volume section here
      - prometheusdata:/prometheus
volumes: 
  mongodbdata: 
  rabbitmqdata:
  seqdata:
  prometheusdata: